import enemigo.*
import alf.*
import items.*
import HUD.*
import mapa.*
import finalDelJuego.*
import main.interactuador

describe "Test entrega 1 - danio/vida/items/inventario/enemigos"
{
    test "El enemigo empieza con toda su vida" {
        assert.equals(100, enemigo1.vida())
    }
    test "El enemigo recibe danio" {
        alf.position(game.at(enemigo1.x_inicial() - 1, enemigo1.y_inicial()))
        alf.atacar(enemigo1)
        assert.equals(80, enemigo1.vida())
    }
    test "El enemigo recibe mas danio cuando Alf tiene la espada" {
        alf.position(game.at(enemigo1.x_inicial() - 1, enemigo1.y_inicial()))
        espada.accion()
        alf.atacar(enemigo1)
        assert.equals(60, enemigo1.vida())
    }
    test "La hamburguesa cura a Alf" {        
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        hamburgesa.accion()
        assert.equals(90, alf.vida())
    }
    test "La hamburguesa cura mas del limite de vida a Alf" {
        hamburgesa.accion()
        assert.equals(100, alf.vida())
    }
    test "Los items al agarrarse se agregan al inventario y al utilizarlos desaparecen del inventario" {
        alf.agarrar(hamburgesa)
        alf.agarrar(espada)
        alf.utilizar(0)
        assert.equals(1, inventarioHUD.inventario().size())
    }
    test "Alf muere cuando se queda sin vida" {        
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        enemigo1.atacar(alf)
        enemigo1.puedoAtacar(true)
        assert.that(alf.vida() <= 0)
    }
}

describe "Test entrega final - puertas/habitaciones/exceptions/victoria/derrota"
{
    test "Pasar a otra habitacion" {
        puerta1.asignarHabitaciones(h1,h2)
        puerta1.asignarPuertaDestino(puerta2)
        enemigo1.vida(0)
        enemigo1.morir()
        puerta1.cambiarCelda()
        assert.equals(h2, alf.habitacionActual())
    }
    test "Test try-catch del interactuador" {
        assert.throwsExceptionWithMessage("Apreta x sobre un item para agarrarlo", { interactuador.obtenerPrimerElemento("x"," sobre un item para agarrarlo") })
    }
    test "Se muestra el fondo para la derrota cuando alf se queda sin vida" {
        alf.vida(0)
        alf.morir()
        assert.that(game.hasVisual(fondoDerrota))
    }
    test "Se muestra el fondo para la victoria al derrotar al jefe" {
        jefe.vida(0)
        jefe.morir()
        assert.that(game.hasVisual(fondoVictoria))
    }
}